// 8 bit shift barrel
module barrel_shifter(
    input [7:0] data,
    input [2:0] amt,
    output reg [7:0] result
);
    always @(*) begin
        case (amt)
            3'd0: result = data;
            3'd1: result = data << 1;
            3'd2: result = data << 2;
            3'd3: result = data << 3;
            3'd4: result = data << 4;
            3'd5: result = data << 5;
            3'd6: result = data << 6;
            3'd7: result = data << 7;
        endcase
    end
endmodule

//tb
module barrel_shifter_tb;
    reg [7:0] data = 8'b11010110;
    reg [2:0] amt;
    wire [7:0] result;

    barrel_shifter uut (.data(data), .amt(amt), .result(result));

    initial begin
        $monitor("amt=%d, result=%b", amt, result);
        for (amt = 0; amt < 8; amt = amt + 1) #10;
        $stop;
    end
endmodule

// 2 to 1 mux
module mux_2to1(
    input x, y, s,
    output m
);
    assign m = (~s & x) | (s & y);
endmodule

//tb
module mux_2to1_tb;
    reg x, y, s;
    wire m;

    mux_2to1 uut (.x(x), .y(y), .s(s), .m(m));

    initial begin
        x = 0; y = 0; s = 0; #10;
        x = 0; y = 1; s = 0; #10;
        x = 1; y = 0; s = 0; #10;
        x = 1; y = 1; s = 0; #10;
        x = 0; y = 0; s = 1; #10;
        x = 0; y = 1; s = 1; #10;
        x = 1; y = 0; s = 1; #10;
        x = 1; y = 1; s = 1; #10;
        $stop;
    end
endmodule

//4 to 1 priority encoder
module priority_encoder(
    input [3:0] in,
    output reg [1:0] out
);
    always @(*) begin
        if (in[3]) out = 2'b11;
        else if (in[2]) out = 2'b10;
        else if (in[1]) out = 2'b01;
        else out = 2'b00;
    end
endmodule

//tb
module priority_encoder_tb;
    reg [3:0] in;
    wire [1:0] out;

    priority_encoder uut (.in(in), .out(out));

    initial begin
        in = 4'b0001; #10;
        in = 4'b0010; #10;
        in = 4'b0100; #10;
        in = 4'b1000; #10;
        $stop;
    end
endmodule

//0-99 up count
module up_down_counter(
    input clk, reset, up, down,
    output [6:0] seg,
    output [1:0] an
);
    reg [3:0] units, tens;
    reg [19:0] mux_counter;

    // Counter logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            units <= 0;
            tens <= 0;
        end
        else if (up) begin
            if (units == 9) begin
                units <= 0;
                tens <= tens + 1;
            end
            else units <= units + 1;
        end
        else if (down) begin
            if (units == 0) begin
                units <= 9;
                tens <= tens - 1;
            end
            else units <= units - 1;
        end
    end

    // 7-segment multiplexing
    always @(posedge clk) mux_counter <= mux_counter + 1;

    assign an = (mux_counter[19]) ? 2'b10 : 2'b01; // Select digit
    assign seg = (mux_counter[19]) ? get_segment(tens) : get_segment(units);

    // 7-segment decoder
    function [6:0] get_segment(input [3:0] digit);
        case (digit)
            4'd0: get_segment = 7'b1000000;
            4'd1: get_segment = 7'b1111001;
            4'd2: get_segment = 7'b0100100;
            4'd3: get_segment = 7'b0110000;
            4'd4: get_segment = 7'b0011001;
            4'd5: get_segment = 7'b0010010;
            4'd6: get_segment = 7'b0000010;
            4'd7: get_segment = 7'b1111000;
            4'd8: get_segment = 7'b0000000;
            4'd9: get_segment = 7'b0010000;
            default: get_segment = 7'b1111111;
        endcase
    endfunction
endmodule

//tb
module up_down_counter_tb;
    reg clk = 0, reset, up, down;
    wire [6:0] seg;
    wire [1:0] an;

    up_down_counter uut (.clk(clk), .reset(reset), .up(up), .down(down), .seg(seg), .an(an));

    always #5 clk = ~clk;

    initial begin
        reset = 1; #10; reset = 0;
        up = 1; #200; up = 0;
        down = 1; #200; down = 0;
        $stop;
    end
endmodule

//digital clock
module digital_clock(
    input clk, reset,
    output [6:0] seg,
    output [1:0] an
);
    reg [5:0] sec = 0, min = 0;
    reg [31:0] counter;

    // Clock divider for 1-second interval
    always @(posedge clk or posedge reset) begin
        if (reset) counter <= 0;
        else counter <= (counter == 50_000_000) ? 0 : counter + 1;
    end

    // Timekeeping
    always @(posedge clk) begin
        if (counter == 50_000_000) begin
            sec <= (sec == 59) ? 0 : sec + 1;
            if (sec == 59) min <= (min == 59) ? 0 : min + 1;
        end
    end

    // Display multiplexing
    reg [19:0] mux_counter;
    always @(posedge clk) mux_counter <= mux_counter + 1;

    assign an = (mux_counter[19]) ? 2'b01 : 2'b10; // Toggle between digits
    assign seg = (mux_counter[19]) ? get_segment(min / 10) : get_segment(sec % 10);

    // 7-segment decoder
    function [6:0] get_segment(input [3:0] digit);
        case (digit)
            4'd0: get_segment = 7'b1000000;
            4'd1: get_segment = 7'b1111001;
            4'd2: get_segment = 7'b0100100;
            4'd3: get_segment = 7'b0110000;
            4'd4: get_segment = 7'b0011001;
            4'd5: get_segment = 7'b0010010;
            4'd6: get_segment = 7'b0000010;
            4'd7: get_segment = 7'b1111000;
            4'd8: get_segment = 7'b0000000;
            4'd9: get_segment = 7'b0010000;
            default: get_segment = 7'b1111111;
        endcase
    endfunction
endmodule

//tb
module digital_clock_tb;
    reg clk = 0, reset;
    wire [6:0] seg;
    wire [1:0] an;

    digital_clock uut (.clk(clk), .reset(reset), .seg(seg), .an(an));

    always #5 clk = ~clk;

    initial begin
        reset = 1; #10; reset = 0;
        #1000; $stop;
    end
endmodule

//clock divider
module clock_divider(
    input clk_in,
    output reg clk_out
);
    reg [27:0] counter = 0;
    parameter DIVISOR = 28'd4; // Output freq = clk_in / DIVISOR

    always @(posedge clk_in) begin
        counter <= counter + 1;
        if (counter >= DIVISOR - 1) counter <= 0;
        clk_out <= (counter < DIVISOR / 2) ? 1 : 0;
    end
endmodule

//tb
module clock_divider_tb;
    reg clk_in = 0;
    wire clk_out;

    clock_divider uut (.clk_in(clk_in), .clk_out(clk_out));

    always #5 clk_in = ~clk_in;

    initial begin
        #100; $stop;
    end
endmodule

//jk ff
module jk_ff(
    input clk, reset, j, k,
    output reg q
);
    always @(posedge clk or posedge reset) begin
        if (reset) q <= 0;
        else case ({j, k})
            2'b00: q <= q;
            2'b01: q <= 0;
            2'b10: q <= 1;
            2'b11: q <= ~q;
        endcase
    end
endmodule

//tb
module jk_ff_tb;
    reg clk = 0, reset, j, k;
    wire q;

    jk_ff uut (.clk(clk), .reset(reset), .j(j), .k(k), .q(q));

    always #5 clk = ~clk;

    initial begin
        reset = 1; #10; reset = 0;
        j = 0; k = 0; #10;
        j = 0; k = 1; #10;
        j = 1; k = 0; #10;
        j = 1; k = 1; #10;
        $stop;
    end
endmodule

//multiplier
module half_adder(sum, carry, a, b);
  output sum, carry;
  input a, b;
  assign sum = a ^ b;
  assign carry = a & b;
endmodule

module full_adder(sum, carry, a, b, cin);
  output sum, carry;
  input a, b, cin;
  assign sum = a ^ b ^ cin;
  assign carry = (a & b) | (b & cin) | (a & cin);
endmodule

module multiplier6x6(product, inp1, inp2);
  output [11:0] product;
  input [5:0] inp1, inp2;
  
  wire [5:0] p0, p1, p2, p3, p4, p5;
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24;
  wire s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

  // Generate partial products
  assign p0 = inp1 & {6{inp2[0]}};
  assign p1 = inp1 & {6{inp2[1]}};
  assign p2 = inp1 & {6{inp2[2]}};
  assign p3 = inp1 & {6{inp2[3]}};
  assign p4 = inp1 & {6{inp2[4]}};
  assign p5 = inp1 & {6{inp2[5]}};

  assign product[0] = p0[0];

  // Add partial products using half adders and full adders
  half_adder ha1(s1, c1, p0[1], p1[0]);
  full_adder fa1(s2, c2, p0[2], p1[1], p2[0]);
  full_adder fa2(s3, c3, p0[3], p1[2], p2[1]);
  full_adder fa3(s4, c4, p0[4], p1[3], p2[2]);
  full_adder fa4(s5, c5, p0[5], p1[4], p2[3]);
  half_adder ha2(s6, c6, p1[5], p2[4]);

  half_adder ha3(s7, c7, s2, p3[0]);
  full_adder fa5(s8, c8, s3, p3[1], c7);
  full_adder fa6(s9, c9, s4, p3[2], c8);
  full_adder fa7(s10, c10, s5, p3[3], c9);
  full_adder fa8(s11, c11, s6, p3[4], c10);
  full_adder fa9(s12, c12, c6, p3[5], c11);

  half_adder ha4(s13, c13, s8, p4[0]);
  full_adder fa10(s14, c14, s9, p4[1], c13);
  full_adder fa11(s15, c15, s10, p4[2], c14);
  full_adder fa12(s16, c16, s11, p4[3], c15);
  full_adder fa13(s17, c17, s12, p4[4], c16);
  full_adder fa14(s18, c18, c12, p4[5], c17);

  half_adder ha5(s19, c19, s14, p5[0]);
  full_adder fa15(s20, c20, s15, p5[1], c19);
  full_adder fa16(s21, c21, s16, p5[2], c20);
  full_adder fa17(product[9], c22, s17, p5[3], c21);
  full_adder fa18(product[10], c23, s18, p5[4], c22);
  full_adder fa19(product[11], c24, c18, p5[5], c23);

  assign product[1] = s1;
  assign product[2] = s7;
  assign product[3] = s13;
  assign product[4] = s19;
  assign product[5] = s20;
  assign product[6] = s21;
  assign product[7] = product[9];
  assign product[8] = product[10];

endmodule

//tb
`timescale 1ns / 1ps

module multiplier6x6_tb;
  
  reg [5:0] inp1, inp2;  // 6-bit inputs
  wire [11:0] product;   // 12-bit product output
  
  multiplier6x6 uut (.product(product), .inp1(inp1), .inp2(inp2));  // Instantiate the module

  initial begin
    $monitor("inp1 = %b, inp2 = %b, product = %b", inp1, inp2, product);
    
    // Test Case 1: 5 Ã— 3 = 15
    inp1 = 6'b000101; // 5
    inp2 = 6'b000011; // 3
    #10;
    
    // Test Case 2: 12 Ã— 4 = 48
    inp1 = 6'b001100; // 12
    inp2 = 6'b000100; // 4
    #10;
    
    // Test Case 3: 25 Ã— 6 = 150
    inp1 = 6'b011001; // 25
    inp2 = 6'b000110; // 6
    #10;
    
    // Test Case 4: 40 Ã— 7 = 280
    inp1 = 6'b101000; // 40
    inp2 = 6'b000111; // 7
    #10;
    
    // Test Case 5: Maximum values 63 Ã— 63 = 3969
    inp1 = 6'b111111; // 63
    inp2 = 6'b111111; // 63
    #10;

    $finish;
  end
endmodule

